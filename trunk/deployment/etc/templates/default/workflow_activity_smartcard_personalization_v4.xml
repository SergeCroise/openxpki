<!-- Generated by "tools/scripts/ogflow.pl " -->


<actions>

    <action name="scpers_revoke_certificate"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::RevokeCertificate">
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_unpublish_certificate"
            class="Workflow::Action::Null">
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_initialize"
            class="Workflow::Action::Null">
            <field name="certs_on_card"/>
            <field name="chip_id"/>
            <field name="token_id" is_required="yes"/>
            <field name="user_id"/>
    </action>

    <action name="scpers_issue_certificate"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::IssueCert"
            csr_queue_key="tmp_queue"
            issuance_queue_key="certs_issued">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_generate_puk"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::GeneratePUK">
            <description>This generates a new puk and shifts it to the front of the array stored in the smartcard.puk namespace that has the key that matches our token id.</description>
            <field name="_default_puk"/>
    </action>

    <action name="scpers_check_prereqs_via_api"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::CheckPrereqs">
            <description>This reads the workflow context parameters set in initialize and sets flags that specify what the next steps will be.</description>
    </action>

    <action name="scpers_escrow_private_key"
            class="OpenXPKI::Server::Workflow::Activity::Tools::Datapool::GetEntry"
            ds_key_param="cert_identifier"
            ds_namespace="certificate.privatekey"
            ds_value_param="_private_key">
            <description>Retrieve encryption certificate from database</description>
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_post_non_escrow_csr"
            class="Workflow::Action::Null">
            <field name="keyid" is_required="yes"/>
            <field name="pkcs10" is_required="yes"/>
    </action>

    <action name="scpers_status_err"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode"
            error_code="Smartcard state neither activated nor initial">
    </action>

    <action name="scpers_reject_wf"
            class="Workflow::Action::Null">
    </action>

    <action name="scpers_next_cert_to_publish"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="cert_identifier"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_puk_write_ok"
            class="Workflow::Action::Null">
            <description>At the moment, this activity is a no-op, but later, it should expire PUKs in the datapool that are known to be no longer valid.</description>
    </action>

    <action name="scpers_create_escrowed_key"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::CreateEscrowedKey"
            ds_namespace="certificate.privatekey">
    </action>

    <action name="scpers_approve_wf"
            class="Workflow::Action::Null">
    </action>

    <action name="scpers_publish_certificate"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::PublishCertificate"
            prefix="smartcard.publishing"
            publish_key="userinfo_mail">
            <description>Generic routine for publishing certificates to LDAP servers</description>
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_user_abort"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode"
            error_code="User would not enter password">
    </action>

    <action name="scpers_cert_inst_ok"
            class="Workflow::Action::Null">
    </action>

    <action name="scpers_create_pkcs12"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::CreatePKCS12"
            p12passwordcontextkey="_password"
            passwordcontextkey="_keypassword"
            pkcs12base64contextkey="_pkcs12base64">
            <field name="_keypassword" is_required="yes"/>
            <field name="_password" is_required="yes"/>
            <field name="_private_key" is_required="yes"/>
            <field name="certificate" is_required="yes"/>
    </action>

    <action name="scpers_add_escrow_cert_to_publish_queue"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="certs_to_publish"
            context_key="cert_identifier"
            function="push">
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_apply_csr_policy"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::ApplyCSRPolicy">
            <field name="login_ids"/>
            <field name="pkcs10" is_required="yes"/>
    </action>

    <action name="scpers_cert_inst_err"
            class="Workflow::Action::Null">
            <field name="sc_error_reason" is_required="yes"/>
    </action>

    <action name="scpers_cert_del_err"
            class="Workflow::Action::Null">
            <field name="sc_error_reason" is_required="yes"/>
    </action>

    <action name="scpers_fetch_puk"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::FetchPUK"
            ds_default_value="$smartcard_default_puk"
            ds_key_param="token_id"
            ds_namespace="smartcard.puk"
            ds_value_param="_puk">
            <description>This fetches the currently-known PUKs from the datastore. If one entry is returned, it is the current PUK on the card. If two are returned, it is probable that the first is a new PUK to be written and the second is the current PUK.\
\
Note to client: the returned string is probably a serialized array, so the client needs to deserialize it before using it.\
\
Suggested behavior of client: if more than one PUK is returned, try to change the PUK to the first in the list using the second. On fail, the first is most likely the correct PUK, on success, the first PUK is now correct. If the state supports the action "puk_write_ok", it should be called when the PUK was successfuly set.</description>
    </action>

    <action name="scpers_cert_del_ok"
            class="Workflow::Action::Null">
    </action>

    <action name="scpers_puk_write_err"
            class="Workflow::Action::Null">
            <field name="sc_error_reason" is_required="yes"/>
    </action>

    <action name="scpers_next_cert_to_revoke"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="cert_identifier"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_next_cert_to_unpublish"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="cert_identifier"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_persist_csrs"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::PersistCSRs">
            <field name="cert_issuance_data" is_required="yes"/>
    </action>

    <action name="scpers_next_cert_to_delete"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="keyid"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_get_next_need_csr"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="csr_cert_type"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_copy_csr_serials"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwritecontext,extendedsyntax"
            tmp_queue="$context->param('csr_serial')">
            <field name="csr_serial" is_required="yes"/>
    </action>

    <action name="scpers_queue_issued_certs_for_installation"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="certs_issued"
            function="pusharray">
            <field name="certs_issued"/>
    </action>

    <action name="scpers_set_workflow_creator"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwritecontext,extendedsyntax"
            creator="$context->param('userinfo_workflow_creator')">
            <field name="userinfo_workflow_creator" is_required="yes"/>
    </action>

    <action name="scpers_fetch_certificate"
            class="OpenXPKI::Server::Workflow::Activity::Tools::RetrieveCertificate">
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_fetch_cert_id_to_install"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="cert_identifier"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_rename_key"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::RenameEscrowedKey"
            ds_namespace="certificate.privatekey">
            <field name="cert_identifier" is_required="yes"/>
    </action>

    <action name="scpers_gui_has_pin"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode"
            error_code="User would not enter password">
    </action>

    <action name="scpers_cleanup_workflow"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwritecontext"
            _keypassword="OpenXPKI"
            cert_install_type=""
            certificate=""
            pkcs10=""
            temp_key_handle="">
    </action>

    <action name="scpers_set_cert_type_to_x509"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwritecontext"
            cert_install_type="x509">
    </action>

    <action name="scpers_set_p12_parameters"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwritecontext"
            _keypassword="OpenXPKI"
            cert_install_type="p12">
    </action>

    <action name="scpers_auth_err"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode"
            error_code="Smartcard state requires badge officer to continue">
    </action>

    <action name="scpers_fail_workflow"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode"
            error_code="failed_by_administrator">
    </action>

    <action name="scpers_post_non_escrow_csr_err"
            class="Workflow::Action::Null">
            <field name="sc_error_reason" is_required="yes"/>
    </action>

    <action name="scpers_queue_certs_for_publication"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="certs_to_publish"
            function="pusharray">
            <field name="certs_to_publish"/>
    </action>

    <action name="scpers_queue_certs_to_recover_for_installation"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="certs_to_install"
            function="pusharray">
            <field name="certs_to_install" is_required="yes"/>
    </action>

    <action name="scpers_queue_certs_to_revoke"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="certs_to_revoke"
            function="pusharray">
            <field name="certs_to_revoke"/>
    </action>

    <action name="scpers_queue_certs_to_delete"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="certs_to_delete"
            function="pusharray">
            <field name="certs_to_delete"/>
    </action>

    <action name="scpers_queue_certs_to_unpublish"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="certs_to_delete"
            function="pusharray">
            <field name="certs_to_unpublish"/>
    </action>

    <action name="scpers_chip_id_mismatch_err"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetErrorCode"
            error_code="Smartcard chip id mismatch">
    </action>

    <action name="scpers_refetch_p12"
            class="Workflow::Action::Null">
    </action>

    <action name="scpers_calculate_key_id"
            class="OpenXPKI::Server::Workflow::Activity::Tools::CalculateKeyId"
            output_key="keyid">
            <field name="certificate" is_required="yes"/>
    </action>

    <action name="scpers_init_tmp_list_csr"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwrite,extendedsyntax"
            tmp_queue="$context->param('certs_to_create')">
            <field name="certs_to_create" is_required="yes"/>
    </action>

    <action name="scpers_next_csr_to_issue"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="tmp_queue"
            context_key="csr_serial"
            function="shift">
            <field name="tmp_queue" is_required="yes"/>
    </action>

    <action name="scpers_create_pkcs12_password"
            class="OpenXPKI::Server::Workflow::Activity::Tools::GeneratePassword"
            password_length="20">
    </action>

    <action name="scpers_compute_puk"
            class="OpenXPKI::Server::Workflow::Activity::SmartCard::ComputePUK">
            <description>Obtain PUK for given Smartcard (possibly only a default value, or a computation based on token_id or chip_id)</description>
            <field name="chip_id"/>
            <field name="token_id" is_required="yes"/>
    </action>

    <action name="scpers_register_user_information"
            class="OpenXPKI::Server::Workflow::Activity::Tools::Datapool::SetEntry"
            ds_encrypt="0"
            ds_force="1"
            ds_key_param="userinfo_employee_id"
            ds_namespace="smartcard.user.currentid"
            ds_value_param="userinfo_currentid">
            <field name="userinfo_currentid" is_required="yes"/>
            <field name="userinfo_employee_id" is_required="yes"/>
    </action>

    <action name="scpers_queue_csr_to_issue"
            class="OpenXPKI::Server::Workflow::Activity::Tools::WFArray"
            array_name="csrs_to_issue"
            context_key="csr_id"
            function="pusharray">
            <field name="csr_id"/>
    </action>

    <action name="scpers_create_escrow_csr"
            class="Workflow::Action::Null">
            <field name="pkcs10" is_required="yes"/>
    </action>

    <action name="scpers_clear_passwords"
            class="OpenXPKI::Server::Workflow::Activity::Tools::SetContext"
            SetContextParameters="overwritecontext"
            _keypassword="">
    </action>

    <action name="scpers_null1" class="Workflow::Action::Null"/>
    <action name="scpers_null2" class="Workflow::Action::Null"/>
    <action name="scpers_null3" class="Workflow::Action::Null"/>
</actions>
